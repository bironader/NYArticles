plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
    id "com.hiya.jacoco-android"
    id "org.sonarqube" version "2.7"
}


android {
    compileSdkVersion ApplicationProperties.COMPLIED_SDK_VERSION
    buildToolsVersion ApplicationProperties.BUILD_TOOL_VERSION

    defaultConfig {
        applicationId ApplicationProperties.PACAKGE_ID
        minSdkVersion ApplicationProperties.MIN_SDK_VERSION
        targetSdkVersion ApplicationProperties.TARGET_SDK_VERSION
        versionCode ApplicationProperties.VERSION_CODE
        versionName ApplicationProperties.VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "API_KEY", API_KEY)
        buildConfigField("String", "BASE_URL", "\"https://api.nytimes.com/svc/mostpopular/v2/\"")


    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    buildFeatures {
        dataBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}
dependencies {


    implementation Dependencies.KTS
    implementation Dependencies.KOTLIN
    implementation Dependencies.APP_COMPAT
    implementation Dependencies.CONSTRAINT_LAYOUT
    implementation Dependencies.HILT
    implementation Dependencies.OKHTTP
    implementation Dependencies.OKHTTP_LOGGING
    implementation Dependencies.RETROFIT
    implementation Dependencies.GSON
    implementation Dependencies.GSON_CONVERTER
    implementation Dependencies.TIMBER
    implementation Dependencies.STETHO
    implementation Dependencies.MATERIAL
    implementation Dependencies.NAV_FRAGMENT
    implementation Dependencies.NAV_UI
    implementation Dependencies.GLIDE
    implementation Dependencies.LIFE_CYLCE_VIEWMODEL
    implementation Dependencies.LIFE_CYLCE_EXT
    implementation Dependencies.LIVEDATA_EXT
    implementation Dependencies.HILT_LIFE_CYCLE
    implementation Dependencies.COROUTINES
    implementation Dependencies.SWIPE_REFRESH
    implementation Dependencies.UtiLS
    implementation Dependencies.ESPRESSO_IDLING_RESOURCE


    debugImplementation Dependencies.CHUCK
    releaseImplementation Dependencies.CHUCK_NO_OP
    kapt AnnotationProcessing.HILT_COMPILER
    kapt AnnotationProcessing.HILT_LIFECYCLE_COMPLIER
    kapt AnnotationProcessing.GLIDE_COMPILER

    testImplementation TestDependencies.JUNIT
    testImplementation TestDependencies.MOCKITO
    testImplementation TestDependencies.ANDROID_ARC_TEST
    testImplementation TestDependencies.COROUTINES_TEST
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'

    androidTestImplementation TestDependencies.ESPRESSO_CONT
    androidTestImplementation TestDependencies.ESPRESSO
    androidTestImplementation TestDependencies.TEST_CORE
    androidTestImplementation TestDependencies.ANDROID_JUNIT_KTX
    debugImplementation(TestDependencies.TEST_FRAGMENT) {
        exclude group: 'androidx.test', module: 'monitor'

    }

}
sonarqube {
    properties {
        property 'sonar.projectName', 'NYArticles'
        property "sonar.projectKey", ApplicationProperties.PACAKGE_ID
        property 'sonar.projectVersion', ApplicationProperties.VERSION_CODE
        property 'sonar.sources', 'src/main/java'
        property 'sonar.language', 'kotlin'
        property 'sonar.sourceEncoding', 'UTF-8'
        property "sonar.tests", "src/test/java, src/androidTest/java"
        property 'sonar.java.binaries', 'build'
        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files;
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files;
        unit.addAll(ui)
        def files = unit.join(", ");

        property "sonar.jacoco.reportPaths", files
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"

    }
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true
}